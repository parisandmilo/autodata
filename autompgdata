{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cars &amp;model</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Year manufactured</th>\n",
       "      <th>Distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chevrolet chevelle malibu</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>3504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Buick skylark 320</td>\n",
       "      <td>11.5</td>\n",
       "      <td>2013</td>\n",
       "      <td>3693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Plymouth satellite</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>3436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Amc rebel sst</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>3433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ford torino</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2011</td>\n",
       "      <td>3449</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Cars &model  Mileage  Year manufactured   Distance\n",
       "0  Chevrolet chevelle malibu     12.0                2010      3504\n",
       "1          Buick skylark 320     11.5                2013      3693\n",
       "2         Plymouth satellite     10.0                2006      3436\n",
       "3              Amc rebel sst      9.0                2008      3433\n",
       "4                Ford torino     10.0                2011      3449"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "df =pd.read_csv('autompgdata.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cars &amp;model</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Year manufactured</th>\n",
       "      <th>Distance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Plymouth 'cuda 340</td>\n",
       "      <td>13.0</td>\n",
       "      <td>2016</td>\n",
       "      <td>3609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Chevrolet monte carlo</td>\n",
       "      <td>14.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>3459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Buick estate wagon (sw)</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>4590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Toyota corona mark ii</td>\n",
       "      <td>11.5</td>\n",
       "      <td>2010</td>\n",
       "      <td>3409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Plymouth duster</td>\n",
       "      <td>11.0</td>\n",
       "      <td>2017</td>\n",
       "      <td>4569</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Cars &model  Mileage  Year manufactured   Distance\n",
       "11       Plymouth 'cuda 340     13.0                2016      3609\n",
       "12    Chevrolet monte carlo     14.0                2009      3459\n",
       "13  Buick estate wagon (sw)     12.0                2010      4590\n",
       "14    Toyota corona mark ii     11.5                2010      3409\n",
       "15          Plymouth duster     11.0                2017      4569"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Cars &model            object\n",
       "Mileage               float64\n",
       "Year manufactured       int64\n",
       "Distance                int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "plt.plot(df['Mileage'],color='green')        \n",
    "plt.xlabel('Mileage')\n",
    "plt.ylabel('Distance')\n",
    "plt.title('Cars&model')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "x =np.random.normal(10,5,100)\n",
    "y =np.random.normal(4,8,50)\n",
    "plt.hist(x,bins=10, color='blue')\n",
    "plt.hist(y,bins=10, color='purple')\n",
    "plt.xlabel('Mileage')\n",
    "plt.ylabel('Distance')\n",
    "plt.title('cars&model')\n",
    "plt.show()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
